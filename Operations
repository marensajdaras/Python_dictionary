list(d) return a list of all the keys used in the dictionary d
len(d)  return the number of items in the dictionary d
d[key] return the item of d with key key
d[key] = value Set d[key] to value
del d[key] remove  d[key] from d Raises a KeyError if they is not in the map 
key in d return True if d has a key key , else False 
key not in d equivalent to not key in d
iter(d) return an iterator over the keys of the dictionary this is a shortcut for iter(d.keys())
clear() remove all items from the dictionary 
copy() return a shallow copy of the dictionary 
get(key[,default]) return the value for key if key is in the dictionary , else default. If default is not given, it defaults to None  so that this method never raises a KeyError
items() return a new view of the dictionary's items 
keys() return a new view of the dictionary's keys 
pop(key[,default]) if key is in the dictionary , remove it and return its value, else return default . If default is not given and key is not in the dictionary, a KeyError is raised.
popitem() remove and return a (key,value) pair from the dictionary. Pairs are returned in LIFO order.
reversed() return a reverse iterator over the keys of the dictionary. THis is a shortcut for reversed(d.keys())
setdefault(key[,default]) If key is in the dictionary, returns its value. IF not , insert key with a value of default and return default.defaults default to None.
update([other]) Update the dictionary with the key/value pairs from other , overwriting existing keys.
values() return a new view of the dictionary's values.
d | other Create anew dictionary with the merged keys and values of d and other, which must both be dictionaries 
d |= other update the dictionary d with keys and values from other , which may be either a mapping or an iterable of key/value pairs. The values of other take priority when d and other share keys.

